#!/usr/bin/env node

/**
 * Module dependencies.
 */

const createApp = require('../app.js');
const debug = require('debug')('marklogic:server');
const http = require('http');

const { docopt } = require('docopt');

const defaultPort = '3000';

const doc = `
Start the web server that connets to MarkLogic via port and host

Usage:
  www [--port=<port>]
  www [--port=<port>] marklogic [--host=<host>] [--user=<user>] [--pass=<pass>]

Options:
  --port=<port>     Port to listen on [default: 3000]
  marklogic:
    --host=<host>   MarkLogic host to connect to [default: localhost]
    --user=<user>   MarkLogic user name
    --pass=<pass>   MarkLogic password
`;

const options = docopt(doc);

const app = createApp(
  options['--host'],
  options['--user'],
  options['--pass'] // FIXME: Yuck!
);

const server = http.createServer(app);
const port = normalizePort(
  options['--port'] || process.env.PORT || defaultPort
);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
